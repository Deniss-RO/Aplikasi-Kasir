/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package kasirtoko;

import com.mysql.jdbc.Connection;
import java.sql.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

/**
 *
 * @author LAB RPL 1
 */
public class Transaksi extends javax.swing.JFrame {

    Connection connection;
    ResultSet rs;
    
    public Transaksi() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        addTableListener();
        totalHarga.setEditable(false);
        Kembalian.setEditable(false);
    } // MOWEIN++++++++++++++++++++++++++++++++++++++

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        totalHarga = new javax.swing.JTextField();
        selesai = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        Bayar = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Kembalian = new javax.swing.JTextField();

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));

        jLabel3.setFont(new java.awt.Font("Gotham Ultra", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Tambah Petugas");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Gotham Ultra", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Transaksi");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 873, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));

        jLabel6.setFont(new java.awt.Font("Gotham", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Total Harga");

        jLabel7.setFont(new java.awt.Font("Gotham", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Kode/Nama Barang");

        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama", "Harga", "Jumlah"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                TablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(Table);
        if (Table.getColumnModel().getColumnCount() > 0) {
            Table.getColumnModel().getColumn(0).setResizable(false);
            Table.getColumnModel().getColumn(1).setResizable(false);
            Table.getColumnModel().getColumn(2).setResizable(false);
        }

        totalHarga.setText("Rp.");
        totalHarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalHargaActionPerformed(evt);
            }
        });

        selesai.setBackground(new java.awt.Color(102, 102, 102));
        selesai.setFont(new java.awt.Font("Gotham Black", 0, 12)); // NOI18N
        selesai.setForeground(new java.awt.Color(0, 0, 0));
        selesai.setText("Selesai");
        selesai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selesaiActionPerformed(evt);
            }
        });

        Back.setBackground(new java.awt.Color(102, 102, 102));
        Back.setFont(new java.awt.Font("Gotham Black", 0, 12)); // NOI18N
        Back.setForeground(new java.awt.Color(0, 0, 0));
        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Gotham", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Bayar");

        Bayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BayarActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Gotham", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Kembalian");

        Kembalian.setText("Rp.");
        Kembalian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KembalianActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(id, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(294, 294, 294))
                    .addComponent(totalHarga)
                    .addComponent(Bayar)
                    .addComponent(Kembalian, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selesai, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(totalHarga, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Bayar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Kembalian, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selesai)
                    .addComponent(Back))
                .addGap(215, 215, 215))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selesaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selesaiActionPerformed
        // Mengambil model dari JTable
        DefaultTableModel tbModel = (DefaultTableModel) Table.getModel();

        // Ambil tanggal saat ini (untuk catatan transaksi)
        java.util.Date date = new java.util.Date();
        java.sql.Date sqlDate = new java.sql.Date(date.getTime());
        java.sql.Time sqlTime = new java.sql.Time(date.getTime());
    
        try {
            // Membuat koneksi ke database
            java.sql.Connection connection = (Connection)Config.configDB();

            // Looping untuk setiap item di tabel
            for (int i = 0; i < tbModel.getRowCount(); i++) {
                String name = (String) tbModel.getValueAt(i, 0);  // Kolom 0 adalah kolom "Nama Barang"
                int qty = Integer.parseInt((String) tbModel.getValueAt(i, 2));  // Kolom 2 adalah kolom "Jumlah"
                double price = Double.parseDouble((String) tbModel.getValueAt(i, 1));  // Kolom 1 adalah kolom "Harga"
                   
                // 1. Kurangi stok di tabel item
                String queryGetStok = "SELECT stock FROM item WHERE item_name = ?";
                PreparedStatement pstGet = connection.prepareStatement(queryGetStok);
                pstGet.setString(1, name);
                ResultSet rs = pstGet.executeQuery();

                if (rs.next()) {
                    int stok = rs.getInt("stock");

                    // Cek apakah stok cukup untuk dikurangi
                    if (stok >= qty) {
                        // Mengurangi stok
                        int newStok = stok - qty;

                        // Update stok di tabel item
                        String queryUpdateStok = "UPDATE item SET stock = ? WHERE item_name = ?";
                        PreparedStatement pstUpdate = connection.prepareStatement(queryUpdateStok);
                        pstUpdate.setInt(1, newStok);
                        pstUpdate.setString(2, name);
                        pstUpdate.executeUpdate();

                } else {
                    JOptionPane.showMessageDialog(null, "Stok barang '" + name + "' tidak mencukupi.");
                    return;  // Hentikan jika stok tidak cukup
                }
            }  
            if (sudahBayar == false) {
                JOptionPane.showMessageDialog(null, "Mohon selesaikan pembayaran terlebih dahulu");
                return;
            }
            else {
                // 2. Masukkan data transaksi ke tabel transaksi
                String queryInsertTransaksi = "INSERT INTO transaction (item_name, item_amount, total_price, transaction_date, transaction_time) VALUES (?, ?, ?, ?, ?)";
                PreparedStatement pstTransaksi = connection.prepareStatement(queryInsertTransaksi);
                pstTransaksi.setString(1, name);  // Nama barang
                pstTransaksi.setInt(2, qty);  // Jumlah barang
                pstTransaksi.setDouble(3, price * qty);  // Total harga barang
                pstTransaksi.setDate(4, sqlDate);  // Tanggal transaksi
                pstTransaksi.setTime(5, sqlTime);  // Waktu transaksi
            
                // Eksekusi perintah untuk menyimpan transaksi
                pstTransaksi.executeUpdate();
            }
        }

        // Tampilkan pesan sukses
        JOptionPane.showMessageDialog(null, "Transaksi berhasil disimpan, stok diperbarui, dan pembayaran berhasil");
        
        // Mengosongkan JTextField setelah transaksi selesai
        id.setText("");
        totalHarga.setText("Rp.");
        Bayar.setText("");
        Kembalian.setText("Rp.");
        totalPrice = 0.0;

        // Mengosongkan JTable setelah transaksi selesai
        tbModel.setRowCount(0);  // Menghapus semua baris dari tabel

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_selesaiActionPerformed
    
    private double totalPrice = 0.0;
    private boolean sudahBayar = false;
    
    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        String itemId = id.getText();
            
        // Validasi input
        if (itemId.isEmpty()) {
            JOptionPane.showMessageDialog(null, "ID item tidak boleh kosong.");
            return;
        }
        
        try {
            // Membuat koneksi ke database
            java.sql.Connection connection = (Connection)Config.configDB();
            
            // Query untuk mencari item berdasarkan ID
            String query = "SELECT * FROM item WHERE item_id = ?";
            PreparedStatement pst = connection.prepareStatement(query);
            pst.setString(1, itemId);
            ResultSet rs = pst.executeQuery();
          
            // Jika item ditemukan
            if (rs.next()) {
                String itemName = rs.getString("item_name");
                double itemPrice = rs.getDouble("price");
                int stok = rs.getInt("stock");
             
                // Mengambil model dari JTable
                DefaultTableModel tbModel = (DefaultTableModel) Table.getModel();
               
                // Variabel untuk menandakan apakah item sudah ada di tabel atau belum
                boolean itemExists = false;
               
                // Looping untuk mengecek apakah item sudah ada di tabel
                for (int i = 0; i < tbModel.getRowCount(); i++) {
                    String tableItemName = (String) tbModel.getValueAt(i, 0);  // Kolom 0 adalah kolom "Nama"
                   
                    // Jika nama item sudah ada di tabel
                    if (tableItemName.equals(itemName)) {
                        int currentQty = Integer.parseInt((String) tbModel.getValueAt(i, 2));  // Kolom 2 adalah kolom "Jumlah"
                        int requestedQty = currentQty + 1;  // Tambahkan 1 ke jumlah barang
                       
                        // Cek apakah stok mencukupi
                        if (requestedQty <= stok) {
                            tbModel.setValueAt(String.valueOf(requestedQty), i, 2);
                          
                            // Hitung subtotal untuk item yang sudah ada
                            double itemSubtotal = itemPrice * 1;  // Hanya 1 barang yang ditambahkan
                          
                            // Tambahkan subtotal ke total harga
                            totalPrice += itemSubtotal;
                         
                        } else {
                            JOptionPane.showMessageDialog(null, "Stok barang tidak mencukupi.");
                        }
                      
                      // Menandakan bahwa item sudah ada
                    itemExists = true;
                    break;
                    }
                }
                
                // Jika item tidak ditemukan di tabel, tambahkan baris baru
                if (!itemExists) {
                    if (stok >= 1) {  // Cek stok
                        String tbData[] = {itemName, String.valueOf(itemPrice), "1"};  // Jumlah 1
                        tbModel.addRow(tbData);  // Menambahkan baris baru ke tabel
                       
                        // Hitung subtotal untuk item baru
                        double itemSubtotal = itemPrice * 1;  // 1 item
                        totalPrice += itemSubtotal;  // Tambahkan subtotal ke total harga
                  } else {
                        JOptionPane.showMessageDialog(null, "Stok barang tidak mencukupi.");
                  }
              }
             
                // Format total harga dengan NumberFormat
                NumberFormat nf = NumberFormat.getInstance(new Locale("id", "ID"));
                String formattedTotalPrice = nf.format(totalPrice);
              
                // Update JTextField totalHarga dengan format angka
                totalHarga.setText("Rp." + formattedTotalPrice);

          } else {
             JOptionPane.showMessageDialog(null, "Item tidak ditemukan.");
          }
         
       } catch (Exception e) {
           JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
      }
       
        // Mengosongkan JTextField search setelah menambahkan item
        id.setText("");
    }//GEN-LAST:event_idActionPerformed

    private void totalHargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalHargaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalHargaActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        DashBoardPetugas.main(null);
        dispose();
    }//GEN-LAST:event_BackActionPerformed

    private void BayarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BayarActionPerformed
        // Mengambil jumlah uang dari JTextField bayar
        double bayar = Double.parseDouble(Bayar.getText());
    
        // Cek apakah jumlah uang cukup
        if (bayar < totalPrice) {
            JOptionPane.showMessageDialog(null, "Jumlah uang tidak mencukupi.");
            return;
        }
    
        // Hitung kembalian
        double kembalian = bayar - totalPrice;
    
        // Format dan tampilkan kembalian di JTextField kembalian
        NumberFormat nf = NumberFormat.getInstance(new Locale("id", "ID"));
        String formattedKembalian = nf.format(kembalian);
        String formattedBayar = nf.format(bayar);
        Bayar.setText("Rp." + formattedBayar);
        Kembalian.setText("Rp." + formattedKembalian);
        
        sudahBayar = true;
    }//GEN-LAST:event_BayarActionPerformed

    private void addTableListener() {
        DefaultTableModel tbModel = (DefaultTableModel) Table.getModel();
    
        tbModel.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                // Hanya tangani perubahan di kolom "Jumlah"
                if (e.getColumn() == 2) {  // Kolom 2 adalah kolom "Jumlah"
                    updateTotalPrice();
                }
            }
        });
    }
    
    private void updateTotalPrice() {
        DefaultTableModel tbModel = (DefaultTableModel) Table.getModel();
        totalPrice = 0.0;  // Reset total harga sebelum menghitung ulang
    
        for (int i = 0; i < tbModel.getRowCount(); i++) {
            double itemPrice = Double.parseDouble((String) tbModel.getValueAt(i, 1));  // Kolom 1 adalah kolom "Harga"
            int itemQty = Integer.parseInt((String) tbModel.getValueAt(i, 2));  // Kolom 2 adalah kolom "Jumlah"
        
            // Hitung subtotal untuk setiap baris
            double itemSubtotal = itemPrice * itemQty;
        
            // Tambahkan ke total harga
            totalPrice += itemSubtotal;
        }
    
        // Format total harga dengan NumberFormat
        NumberFormat nf = NumberFormat.getInstance(new Locale("id", "ID"));
        String formattedTotalPrice = nf.format(totalPrice);
    
        // Update JTextField totalHarga dengan format angka
        totalHarga.setText("Rp." + formattedTotalPrice);
    }
    
    private void KembalianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KembalianActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_KembalianActionPerformed

    private void TablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_TablePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_TablePropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Transaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Transaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Transaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Transaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Transaksi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JTextField Bayar;
    private javax.swing.JTextField Kembalian;
    private javax.swing.JTable Table;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton selesai;
    private javax.swing.JTextField totalHarga;
    // End of variables declaration//GEN-END:variables
}
//cild corn